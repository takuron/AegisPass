# 工作流的名称
name: Rust CI

# 定义触发工作流的事件
on:
  # 当有代码推送到 main 分支时
  push:
    branches: [ "main" ]
  # 当有针对 main 分支的拉取请求时
  pull_request:
    branches: [ "main" ]

# 设置工作流的环境变量
env:
  CARGO_TERM_COLOR: always

# 定义工作流中的作业
jobs:
  # "test" 作业：运行单元测试
  test:
    name: Run tests
    # 指定运行环境
    runs-on: ubuntu-latest
    steps:
      # 第一步：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：缓存 Cargo 依赖项
      # 这可以显著加快后续构建的速度
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          # 当 Cargo.lock 文件变化时，缓存会失效
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # 第三步：运行测试
      - name: Run tests
        run: cargo test --verbose

  # "build" 作业：编译项目
  build:
    name: Build application
    # 指定运行环境
    runs-on: ubuntu-latest
    # 定义依赖关系，确保 "build" 作业在 "test" 成功后才运行
    needs: test
    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 同样，缓存依赖项以加速编译
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # 编译一个用于发布的、经过优化的可执行文件
      # --verbose 参数会输出更详细的编译信息
      - name: Build release binary
        run: cargo build --release --verbose